{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\s4397674\\\\Documents\\\\PP\\\\test\\\\components\\\\QuestScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { createAppContainer } from \"react-navigation\";\nimport { createMaterialTopTabNavigator } from \"react-navigation-tabs\";\nimport { fb } from \"../src/firebase/APIKeys.js\";\nimport * as firebase from \"firebase\";\nvar questData = {};\nvar baseHealth = 0;\nvar baseStatus = 0;\nvar baseCurrency = 0;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(fb.FirebaseConfig);\n}\n\nreadData();\n\nfunction readData() {\n  fb.database().ref(\"response/quests\").once(\"value\", function (dataSnapShot) {\n    questData = dataSnapShot.val();\n  });\n  fb.database().ref(\"response/avatarHealth\").once(\"value\", function (dataSnapShot) {\n    baseHealth = dataSnapShot.val();\n  });\n  fb.database().ref(\"response/avatarStatus\").once(\"value\", function (dataSnapShot) {\n    baseStatus = dataSnapShot.val();\n  });\n  fb.database().ref(\"response/currency\").once(\"value\", function (dataSnapShot) {\n    baseCurrency = dataSnapShot.val();\n  });\n}\n\nfunction completeQuest(rewardHealth) {\n  baseHealth += rewardHealth[\"avatarHealth\"];\n  baseStatus += rewardHealth[\"avatarStatus\"];\n  baseCurrency += rewardHealth[\"shopCurrency\"];\n\n  if (baseHealth >= 100) {\n    firebase.database().ref(\"response/\").update({\n      avatarHealth: 100,\n      avatarStatus: baseStatus,\n      currency: baseCurrency\n    }).then(function () {\n      console.log(\"Completed a quest\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } else {\n    firebase.database().ref(\"response/\").update({\n      avatarHealth: baseHealth,\n      avatarStatus: baseStatus,\n      currency: baseCurrency\n    }).then(function () {\n      console.log(\"Completed a quest\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n\nvar updating = function updating(index, id, name, progress, type, reward, desc, difficulty, category) {\n  return new Promise(function (resolve, reject) {\n    var key;\n\n    if (id != null) {\n      key = id;\n    } else {\n      key = fb.database().ref().push().key;\n    }\n\n    var complete = {\n      questCompletion: progress[\"questMaxValue\"],\n      questMaxValue: progress[\"questMaxValue\"]\n    };\n    var dataToSave = {\n      questID: key,\n      questName: name,\n      questProgress: complete,\n      questReward: reward,\n      questDescription: desc,\n      questDifficulty: difficulty,\n      questType: type,\n      questCategory: category\n    };\n    console.log(dataToSave);\n    fb.database().ref(\"/response/quests/\" + index).update(dataToSave).then(function (snapshot) {\n      resolve(snapshot);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n};\n\nfunction ReadAllTab() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questData = _useState2[0],\n      allQuests = _useState2[1];\n\n  useEffect(function () {\n    var questRef = fb.database().ref(\"/response/quests\");\n    var OnLoadingListener = questRef.on(\"value\", function (snapshot) {\n      allQuests([]);\n      snapshot.forEach(function (childSnapshot) {\n        allQuests(function (questData) {\n          return [].concat(_toConsumableArray(questData), [childSnapshot.val()]);\n        });\n      });\n    });\n    return function () {\n      questRef.off(\"value\", OnLoadingListener);\n    };\n  }, []);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, questData.map(function (item) {\n    return React.createElement(TouchableOpacity, {\n      key: item[\"questID\"],\n      style: styles.textContainer,\n      onPress: function onPress() {\n        return Alert.alert(\"Task Complete?\", \"Confirm and get rewards:  \\nHealth: \" + item[\"questReward\"][\"avatarHealth\"] + \"\\nHappiness: \" + item[\"questReward\"][\"avatarStatus\"], [{\n          text: \"Cancel\",\n          onPress: function onPress() {\n            return console.log(\"click cancel\");\n          },\n          style: \"cancel\"\n        }, {\n          text: \"OK\",\n          onPress: function onPress() {\n            return completeQuest(item[\"questReward\"]);\n          }\n        }], {\n          cancelable: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      style: styles.taskDiv,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.taskTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }, \" \", item[\"questName\"]), React.createElement(Text, {\n      style: styles.rewardPoint,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }, \"+ \", item[\"questReward\"][\"avatarHealth\"], React.createElement(Icon, {\n      name: \"md-heart\",\n      color: \"red\",\n      size: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }))), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, \" \", item[\"questDescription\"]));\n  }));\n}\n\nReadAllTab.navigationOptions = {\n  tabBarIcon: function tabBarIcon(_ref) {\n    var tintColor = _ref.tintColor,\n        focused = _ref.focused;\n    return React.createElement(Icon, {\n      name: focused ? \"ios-cube\" : \"md-cube\",\n      color: tintColor,\n      size: 25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 5\n      }\n    });\n  }\n};\n\nfunction InProgreeTab() {\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inProgress = _useState4[0],\n      allInProgressQuests = _useState4[1];\n\n  useEffect(function () {\n    var questRef = fb.database().ref(\"/response/quests\");\n    var OnLoadingListener = questRef.on(\"value\", function (snapshot) {\n      allInProgressQuests([]);\n      snapshot.forEach(function (childSnapshot) {\n        allInProgressQuests(function (inProgress) {\n          return [].concat(_toConsumableArray(inProgress), [childSnapshot.val()]);\n        });\n      });\n    });\n    return function () {\n      questRef.off(\"value\", OnLoadingListener);\n    };\n  }, []);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }\n  }, inProgress.map(function (item, index) {\n    if (item[\"questProgress\"][\"questCompletion\"] >= 0 && item[\"questProgress\"][\"questCompletion\"] != item[\"questProgress\"][\"questMaxValue\"]) {\n      return React.createElement(TouchableOpacity, {\n        key: item[\"questID\"],\n        style: styles.textContainer,\n        onPress: function onPress() {\n          return Alert.alert(\"Your Progress\", \"You have finished \" + item[\"questReward\"][\"avatarHealth\"] + \"/\" + item[\"questReward\"][\"avatarStatus\"] + \" of the task, good job and go on\", [{\n            text: \"Cancel\",\n            onPress: function onPress() {\n              return console.log(\"click cancel\");\n            },\n            style: \"cancel\"\n          }, {\n            text: \"OK\",\n            onPress: function onPress() {\n              completeQuest(item[\"questReward\"]);\n              updating(index, item[\"questID\"], item[\"questName\"], item[\"questProgress\"], item[\"questType\"], item[\"questReward\"], item[\"questDescription\"], item[\"questDifficulty\"], item[\"questCategory\"]);\n            }\n          }], {\n            cancelable: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.taskDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: styles.taskTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }\n      }, \" \", item[\"questName\"]), React.createElement(Text, {\n        style: styles.rewardPoint,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 17\n        }\n      }, \"+ \", item[\"questReward\"][\"avatarHealth\"], React.createElement(Icon, {\n        name: \"md-heart\",\n        color: \"red\",\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 19\n        }\n      }))), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }\n      }, \" \", item[\"questDescription\"]));\n    }\n  }));\n}\n\nInProgreeTab.navigationOptions = {\n  tabBarIcon: function tabBarIcon(_ref2) {\n    var tintColor = _ref2.tintColor,\n        focused = _ref2.focused;\n    return React.createElement(Icon, {\n      name: focused ? \"ios-stats\" : \"ios-stats\",\n      color: tintColor,\n      size: 25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 5\n      }\n    });\n  }\n};\n\nfunction CompletionTab() {\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      completedQuest = _useState6[0],\n      allCompletedQuests = _useState6[1];\n\n  useEffect(function () {\n    var questRef = fb.database().ref(\"/response/quests\");\n    var OnLoadingListener = questRef.on(\"value\", function (snapshot) {\n      allCompletedQuests([]);\n      snapshot.forEach(function (childSnapshot) {\n        if (childSnapshot.val()[\"questProgress\"][\"questCompletion\"] == childSnapshot.val()[\"questProgress\"][\"questMaxValue\"]) {\n          allCompletedQuests(function (completedQuest) {\n            return [].concat(_toConsumableArray(completedQuest), [childSnapshot.val()]);\n          });\n        }\n      });\n    });\n    return function () {\n      questRef.off(\"value\", OnLoadingListener);\n    };\n  }, []);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 5\n    }\n  }, completedQuest.map(function (item) {\n    {\n      return React.createElement(TouchableOpacity, {\n        key: item[\"questID\"],\n        style: styles.textContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.taskDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: styles.taskTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 17\n        }\n      }, \" \", item[\"questName\"]), React.createElement(Text, {\n        style: styles.rewardPoint,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 17\n        }\n      }, \"+ \", item[\"questReward\"][\"avatarHealth\"], React.createElement(Icon, {\n        name: \"md-checkmark\",\n        color: \"green\",\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 19\n        }\n      }))), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 15\n        }\n      }, \" \", item[\"questDescription\"]));\n    }\n  }));\n}\n\nCompletionTab.navigationOptions = {\n  tabBarIcon: function tabBarIcon(_ref3) {\n    var tintColor = _ref3.tintColor,\n        focused = _ref3.focused;\n    return React.createElement(Icon, {\n      name: focused ? \"ios-flag\" : \"ios-flag\",\n      color: tintColor,\n      size: 25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 5\n      }\n    });\n  }\n};\nvar Tab = createMaterialTopTabNavigator({\n  All: ReadAllTab,\n  Inprogress: InProgreeTab,\n  Completed: CompletionTab\n}, {\n  tabBarOptions: {\n    activeTintColor: \"black\",\n    showIcon: true,\n    showLabel: true,\n    style: {\n      borderColor: \"black\",\n      backgroundColor: \"#FF6600\"\n    }\n  }\n});\nvar AppIndex = createAppContainer(Tab);\n\nvar QuestScreen = function (_Component) {\n  _inherits(QuestScreen, _Component);\n\n  var _super = _createSuper(QuestScreen);\n\n  function QuestScreen(props) {\n    var _this;\n\n    _classCallCheck(this, QuestScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      questCompletion: 0,\n      avatarStatus: 0,\n      avatarHealth: 0,\n      avatarCurrency: 0\n    };\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(ApiKeys.FirebaseConfig);\n    }\n\n    return _this;\n  }\n\n  _createClass(QuestScreen, [{\n    key: \"render\",\n    value: function render() {\n      readData();\n      return React.createElement(View, {\n        style: styles.MainContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 7\n        }\n      }, React.createElement(ImageBackground, {\n        source: require(\"../assets/BackgroundOrange.png\"),\n        style: styles.backgroundImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 9\n        }\n      }, React.createElement(AppIndex, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return QuestScreen;\n}(Component);\n\nexport { QuestScreen as default };\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"center\"\n  },\n  MainContainer: {\n    flex: 1,\n    flexDirection: \"column\"\n  },\n  navBar: {\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\"\n  },\n  taskCard: {\n    flex: 5,\n    backgroundColor: \"#fff\",\n    borderColor: \"black\",\n    borderWidth: 1,\n    margin: 10,\n    justifyContent: \"center\"\n  },\n  taskDiv: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  taskTitle: {\n    fontSize: 20\n  },\n  rewardPoint: {\n    fontSize: 20,\n    color: \"darkblue\"\n  },\n  taskbody: {\n    flex: 1,\n    fontSize: 14\n  },\n  taskDone: {\n    borderColor: \"#737373\",\n    backgroundColor: \"darkgrey\"\n  },\n  Content: {\n    flex: 10,\n    backgroundColor: \"#fff\",\n    marginTop: \"15%\"\n  },\n  textContainer: {\n    padding: 10,\n    marginTop: 3,\n    backgroundColor: \"white\",\n    borderColor: \"darkgrey\",\n    borderWidth: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/s4397674/Documents/PP/test/components/QuestScreen.js"],"names":["React","Component","useState","useEffect","NavigationContainer","createStackNavigator","Icon","createAppContainer","createMaterialTopTabNavigator","fb","firebase","questData","baseHealth","baseStatus","baseCurrency","apps","length","initializeApp","FirebaseConfig","readData","database","ref","once","dataSnapShot","val","completeQuest","rewardHealth","update","avatarHealth","avatarStatus","currency","then","console","log","catch","error","updating","index","id","name","progress","type","reward","desc","difficulty","category","Promise","resolve","reject","key","push","complete","questCompletion","questMaxValue","dataToSave","questID","questName","questProgress","questReward","questDescription","questDifficulty","questType","questCategory","snapshot","err","ReadAllTab","allQuests","questRef","OnLoadingListener","on","forEach","childSnapshot","off","map","item","styles","textContainer","Alert","alert","text","onPress","style","cancelable","taskDiv","taskTitle","rewardPoint","navigationOptions","tabBarIcon","tintColor","focused","InProgreeTab","inProgress","allInProgressQuests","CompletionTab","completedQuest","allCompletedQuests","Tab","All","Inprogress","Completed","tabBarOptions","activeTintColor","showIcon","showLabel","borderColor","backgroundColor","AppIndex","QuestScreen","props","state","avatarCurrency","ApiKeys","MainContainer","require","backgroundImage","StyleSheet","create","flex","resizeMode","justifyContent","flexDirection","navBar","taskCard","borderWidth","margin","fontSize","color","taskbody","taskDone","Content","marginTop","padding"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Button,\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  Image,\r\n  Alert,\r\n  ImageBackground,\r\n} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\n//import CardView from \"react-native-cardview\";\r\n//import questData from \"../assets/data/data.json\";\r\nimport Icon from \"react-native-vector-icons/Ionicons\";\r\nimport { createAppContainer } from \"react-navigation\";\r\nimport { createMaterialTopTabNavigator } from \"react-navigation-tabs\";\r\n//import questData from \"../assets/data/data.json\";\r\n\r\nimport { fb } from \"../src/firebase/APIKeys.js\";\r\nimport * as firebase from \"firebase\";\r\n\r\nvar questData = {};\r\nvar baseHealth = 0;\r\nvar baseStatus = 0;\r\nvar baseCurrency = 0;\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(fb.FirebaseConfig);\r\n}\r\nreadData();\r\n\r\nfunction readData() {\r\n  fb.database()\r\n    .ref(\"response/quests\")\r\n    .once(\"value\", (dataSnapShot) => {\r\n      questData = dataSnapShot.val();\r\n    });\r\n  fb.database()\r\n    .ref(\"response/avatarHealth\")\r\n    .once(\"value\", (dataSnapShot) => {\r\n      baseHealth = dataSnapShot.val();\r\n    });\r\n  fb.database()\r\n    .ref(\"response/avatarStatus\")\r\n    .once(\"value\", (dataSnapShot) => {\r\n      baseStatus = dataSnapShot.val();\r\n    });\r\n  fb.database()\r\n    .ref(\"response/currency\")\r\n    .once(\"value\", (dataSnapShot) => {\r\n      baseCurrency = dataSnapShot.val();\r\n    });\r\n}\r\n\r\nfunction completeQuest(rewardHealth) {\r\n  baseHealth += rewardHealth[\"avatarHealth\"];\r\n  baseStatus += rewardHealth[\"avatarStatus\"];\r\n  baseCurrency += rewardHealth[\"shopCurrency\"];\r\n  if (baseHealth >= 100) {\r\n    firebase\r\n      .database()\r\n      .ref(\"response/\")\r\n      .update({\r\n        avatarHealth: 100,\r\n        avatarStatus: baseStatus,\r\n        currency: baseCurrency,\r\n      })\r\n      .then(() => {\r\n        console.log(\"Completed a quest\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  } else {\r\n    firebase\r\n      .database()\r\n      .ref(\"response/\")\r\n      .update({\r\n        avatarHealth: baseHealth,\r\n        avatarStatus: baseStatus,\r\n        currency: baseCurrency,\r\n      })\r\n      .then(() => {\r\n        console.log(\"Completed a quest\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n}\r\n\r\n// Updating Quest after a quest has been completed.\r\nconst updating = (\r\n  index,\r\n  id,\r\n  name,\r\n  progress,\r\n  type,\r\n  reward,\r\n  desc,\r\n  difficulty,\r\n  category\r\n) => {\r\n  return new Promise(function (resolve, reject) {\r\n    let key;\r\n    if (id != null) {\r\n      key = id;\r\n    } else {\r\n      key = fb.database().ref().push().key;\r\n    }\r\n    let complete = {\r\n      questCompletion: progress[\"questMaxValue\"],\r\n      questMaxValue: progress[\"questMaxValue\"],\r\n    };\r\n    let dataToSave = {\r\n      questID: key,\r\n      questName: name,\r\n      questProgress: complete,\r\n      questReward: reward,\r\n      questDescription: desc,\r\n      questDifficulty: difficulty,\r\n      questType: type,\r\n      questCategory: category,\r\n    };\r\n    console.log(dataToSave);\r\n    fb.database()\r\n      .ref(\"/response/quests/\" + index)\r\n      .update(dataToSave)\r\n      .then((snapshot) => {\r\n        resolve(snapshot);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nfunction ReadAllTab() {\r\n  const [questData, allQuests] = useState([]);\r\n  useEffect(() => {\r\n    const questRef = fb.database().ref(\"/response/quests\");\r\n    const OnLoadingListener = questRef.on(\"value\", (snapshot) => {\r\n      allQuests([]);\r\n      snapshot.forEach(function (childSnapshot) {\r\n        allQuests((questData) => [...questData, childSnapshot.val()]);\r\n      });\r\n    });\r\n    return () => {\r\n      questRef.off(\"value\", OnLoadingListener);\r\n    };\r\n  }, []);\r\n  return (\r\n    <View>\r\n      {questData.map(function (item) {\r\n        return (\r\n          <TouchableOpacity\r\n            key={item[\"questID\"]}\r\n            style={styles.textContainer}\r\n            onPress={() =>\r\n              Alert.alert(\r\n                \"Task Complete?\",\r\n                \"Confirm and get rewards:  \\nHealth: \" +\r\n                  item[\"questReward\"][\"avatarHealth\"] +\r\n                  \"\\nHappiness: \" +\r\n                  item[\"questReward\"][\"avatarStatus\"],\r\n                [\r\n                  {\r\n                    text: \"Cancel\",\r\n                    onPress: () => console.log(\"click cancel\"),\r\n                    style: \"cancel\",\r\n                  },\r\n                  {\r\n                    text: \"OK\",\r\n                    onPress: () => completeQuest(item[\"questReward\"]),\r\n                    //onPress: () => console.log(\"congratulations\"),\r\n                  },\r\n                ],\r\n                { cancelable: false }\r\n              )\r\n            }\r\n          >\r\n            <View style={styles.taskDiv}>\r\n              <Text style={styles.taskTitle}> {item[\"questName\"]}</Text>\r\n              <Text style={styles.rewardPoint}>\r\n                + {item[\"questReward\"][\"avatarHealth\"]}\r\n                <Icon name={\"md-heart\"} color={\"red\"} size={20} />\r\n              </Text>\r\n            </View>\r\n            <Text> {item[\"questDescription\"]}</Text>\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n}\r\nReadAllTab.navigationOptions = {\r\n  tabBarIcon: ({ tintColor, focused }) => (\r\n    <Icon name={focused ? \"ios-cube\" : \"md-cube\"} color={tintColor} size={25} />\r\n  ),\r\n};\r\n\r\nfunction InProgreeTab() {\r\n  const [inProgress, allInProgressQuests] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const questRef = fb.database().ref(\"/response/quests\");\r\n    const OnLoadingListener = questRef.on(\"value\", (snapshot) => {\r\n      allInProgressQuests([]);\r\n      snapshot.forEach(function (childSnapshot) {\r\n        allInProgressQuests((inProgress) => [\r\n          ...inProgress,\r\n          childSnapshot.val(),\r\n        ]);\r\n      });\r\n    });\r\n    return () => {\r\n      questRef.off(\"value\", OnLoadingListener);\r\n    };\r\n  }, []);\r\n  return (\r\n    <View>\r\n      {inProgress.map(function (item, index) {\r\n        if (\r\n          item[\"questProgress\"][\"questCompletion\"] >= 0 &&\r\n          item[\"questProgress\"][\"questCompletion\"] !=\r\n            item[\"questProgress\"][\"questMaxValue\"]\r\n        ) {\r\n          return (\r\n            <TouchableOpacity\r\n              key={item[\"questID\"]}\r\n              style={styles.textContainer}\r\n              onPress={() =>\r\n                Alert.alert(\r\n                  \"Your Progress\",\r\n                  \"You have finished \" +\r\n                    item[\"questReward\"][\"avatarHealth\"] +\r\n                    \"/\" +\r\n                    item[\"questReward\"][\"avatarStatus\"] +\r\n                    \" of the task, good job and go on\",\r\n                  [\r\n                    {\r\n                      text: \"Cancel\",\r\n                      onPress: () => console.log(\"click cancel\"),\r\n                      style: \"cancel\",\r\n                    },\r\n                    {\r\n                      text: \"OK\",\r\n                      onPress: () => {\r\n                        completeQuest(item[\"questReward\"]);\r\n                        updating(\r\n                          index,\r\n                          item[\"questID\"],\r\n                          item[\"questName\"],\r\n                          item[\"questProgress\"],\r\n                          item[\"questType\"],\r\n                          item[\"questReward\"],\r\n                          item[\"questDescription\"],\r\n                          item[\"questDifficulty\"],\r\n                          item[\"questCategory\"]\r\n                        );\r\n                      },\r\n                    },\r\n                  ],\r\n                  { cancelable: false }\r\n                )\r\n              }\r\n            >\r\n              <View style={styles.taskDiv}>\r\n                <Text style={styles.taskTitle}> {item[\"questName\"]}</Text>\r\n                <Text style={styles.rewardPoint}>\r\n                  + {item[\"questReward\"][\"avatarHealth\"]}\r\n                  <Icon name={\"md-heart\"} color={\"red\"} size={20} />\r\n                </Text>\r\n              </View>\r\n              <Text> {item[\"questDescription\"]}</Text>\r\n            </TouchableOpacity>\r\n          );\r\n        }\r\n      })}\r\n    </View>\r\n  );\r\n}\r\nInProgreeTab.navigationOptions = {\r\n  tabBarIcon: ({ tintColor, focused }) => (\r\n    <Icon\r\n      name={focused ? \"ios-stats\" : \"ios-stats\"}\r\n      color={tintColor}\r\n      size={25}\r\n    />\r\n  ),\r\n};\r\n\r\nfunction CompletionTab() {\r\n  const [completedQuest, allCompletedQuests] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const questRef = fb.database().ref(\"/response/quests\");\r\n    const OnLoadingListener = questRef.on(\"value\", (snapshot) => {\r\n      allCompletedQuests([]);\r\n      snapshot.forEach(function (childSnapshot) {\r\n        if (\r\n          childSnapshot.val()[\"questProgress\"][\"questCompletion\"] ==\r\n          childSnapshot.val()[\"questProgress\"][\"questMaxValue\"]\r\n        ) {\r\n          allCompletedQuests((completedQuest) => [\r\n            ...completedQuest,\r\n            childSnapshot.val(),\r\n          ]);\r\n        }\r\n      });\r\n    });\r\n    return () => {\r\n      questRef.off(\"value\", OnLoadingListener);\r\n    };\r\n  }, []);\r\n  return (\r\n    <View>\r\n      {completedQuest.map(function (item) {\r\n        {\r\n          return (\r\n            <TouchableOpacity\r\n              key={item[\"questID\"]}\r\n              style={styles.textContainer}\r\n            >\r\n              <View style={styles.taskDiv}>\r\n                <Text style={styles.taskTitle}> {item[\"questName\"]}</Text>\r\n                <Text style={styles.rewardPoint}>\r\n                  + {item[\"questReward\"][\"avatarHealth\"]}\r\n                  <Icon name={\"md-checkmark\"} color={\"green\"} size={20} />\r\n                </Text>\r\n              </View>\r\n              <Text> {item[\"questDescription\"]}</Text>\r\n            </TouchableOpacity>\r\n          );\r\n        }\r\n      })}\r\n    </View>\r\n  );\r\n}\r\nCompletionTab.navigationOptions = {\r\n  tabBarIcon: ({ tintColor, focused }) => (\r\n    <Icon\r\n      name={focused ? \"ios-flag\" : \"ios-flag\"}\r\n      color={tintColor}\r\n      size={25}\r\n    />\r\n  ),\r\n};\r\n\r\nconst Tab = createMaterialTopTabNavigator(\r\n  {\r\n    All: ReadAllTab,\r\n    Inprogress: InProgreeTab,\r\n    Completed: CompletionTab,\r\n  },\r\n  {\r\n    tabBarOptions: {\r\n      activeTintColor: \"black\",\r\n      showIcon: true,\r\n      showLabel: true,\r\n      style: {\r\n        borderColor: \"black\",\r\n        backgroundColor: \"#FF6600\",\r\n      },\r\n    },\r\n  }\r\n);\r\nconst AppIndex = createAppContainer(Tab);\r\n\r\nexport default class QuestScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questCompletion: 0,\r\n      avatarStatus: 0,\r\n      avatarHealth: 0,\r\n      avatarCurrency: 0,\r\n    };\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(ApiKeys.FirebaseConfig);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    readData();\r\n    return (\r\n      <View style={styles.MainContainer}>\r\n        <ImageBackground\r\n          source={require(\"../assets/BackgroundOrange.png\")}\r\n          style={styles.backgroundImage}\r\n        >\r\n          <AppIndex />\r\n        </ImageBackground>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  backgroundImage: {\r\n    flex: 1,\r\n    resizeMode: \"cover\",\r\n    justifyContent: \"center\",\r\n  },\r\n  MainContainer: {\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n  },\r\n\r\n  navBar: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-evenly\",\r\n  },\r\n\r\n  taskCard: {\r\n    flex: 5,\r\n    backgroundColor: \"#fff\",\r\n    borderColor: \"black\",\r\n    borderWidth: 1,\r\n    margin: 10,\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  taskDiv: {\r\n    // flex: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n\r\n  taskTitle: {\r\n    fontSize: 20,\r\n  },\r\n\r\n  rewardPoint: {\r\n    fontSize: 20,\r\n    color: \"darkblue\",\r\n  },\r\n\r\n  taskbody: {\r\n    flex: 1,\r\n    fontSize: 14,\r\n  },\r\n\r\n  taskDone: {\r\n    borderColor: \"#737373\",\r\n    backgroundColor: \"darkgrey\",\r\n  },\r\n\r\n  Content: {\r\n    flex: 10,\r\n    backgroundColor: \"#fff\",\r\n    marginTop: \"15%\",\r\n  },\r\n\r\n  textContainer: {\r\n    padding: 10,\r\n    marginTop: 3,\r\n    backgroundColor: \"white\",\r\n    borderColor: \"darkgrey\",\r\n    borderWidth: 1,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}